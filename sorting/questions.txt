//#1 - Sort 10 schools around your house by distance: 
     - insertion sort(small data, simple code, space complexity o(n))

//#2 - eBay sorts listings by the current Bid amount:
     - radix or counting sort(we know range of numbers to be sorted)

//#3 - Sport scores on ESPN  -- quick sort(memeory efficient)

//#4 - Massive database (can't fit all into memory) needs to sort through past year's user data 
    -- merge sort(large numbers of data - so it will be worst case if we use quick sort time complexity will increase so it better to use merge sort).

//#5 - Almost sorted Udemy review data needs to update and add 2 new reviews -- insertion sort

//#6 - Temperature Records for the past 50 years in Canada 
     - temperature range will be around -30 to 40 degree so it better to use radix but if we want data to be exact decial places like 34.5
     better go with quick sort.

//#7 - Large user name database needs to be sorted. Data is very random. -- merge sort or quick sort

//#8 - You want to teach sorting for the first time -- bubble sort, selection sort